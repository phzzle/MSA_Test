/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TenantService } from "../tenant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TenantCreateInput } from "./TenantCreateInput";
import { Tenant } from "./Tenant";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantWhereUniqueInput } from "./TenantWhereUniqueInput";
import { TenantUpdateInput } from "./TenantUpdateInput";
import { OrganizationFindManyArgs } from "../../organization/base/OrganizationFindManyArgs";
import { Organization } from "../../organization/base/Organization";
import { OrganizationWhereUniqueInput } from "../../organization/base/OrganizationWhereUniqueInput";
import { RoleFindManyArgs } from "../../role/base/RoleFindManyArgs";
import { Role } from "../../role/base/Role";
import { RoleWhereUniqueInput } from "../../role/base/RoleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TenantControllerBase {
  constructor(
    protected readonly service: TenantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tenant })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TenantCreateInput,
  })
  async createTenant(@common.Body() data: TenantCreateInput): Promise<Tenant> {
    return await this.service.createTenant({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tenant] })
  @ApiNestedQuery(TenantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenants(@common.Req() request: Request): Promise<Tenant[]> {
    const args = plainToClass(TenantFindManyArgs, request.query);
    return this.service.tenants({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    const result = await this.service.tenant({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TenantUpdateInput,
  })
  async updateTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() data: TenantUpdateInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/organizations")
  @ApiNestedQuery(OrganizationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Organization",
    action: "read",
    possession: "any",
  })
  async findOrganizations(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Organization[]> {
    const query = plainToClass(OrganizationFindManyArgs, request.query);
    const results = await this.service.findOrganizations(params.id, {
      ...query,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/organizations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectOrganizations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/organizations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateOrganizations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/organizations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectOrganizations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrganizationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      organizations: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/roles")
  @ApiNestedQuery(RoleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Role",
    action: "read",
    possession: "any",
  })
  async findRoles(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Role[]> {
    const query = plainToClass(RoleFindManyArgs, request.query);
    const results = await this.service.findRoles(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        permissions: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/roles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/roles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/roles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roles: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
